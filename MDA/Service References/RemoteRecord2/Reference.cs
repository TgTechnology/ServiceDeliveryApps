//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MDA.RemoteRecord2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord", ConfigurationName="RemoteRecord2.RemoteRecordScheduler2Soap")]
    public interface RemoteRecordScheduler2Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/AddRecordingDefinition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult AddRecordingDefinition(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.RecordingDefinition recordingDefinition, bool epgOptional, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/AddRecordingDefinition", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> AddRecordingDefinitionAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.RecordingDefinition recordingDefinition, bool epgOptional, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/GetRecordings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.RecordingsResult GetRecordings(MDA.RemoteRecord2.ExternalId externalAccountId, int recordingType, MDA.RemoteRecord2.DvrPagingInfo pagingInfo, MDA.RemoteRecord2.EpgInfo epgInfo, long deltasFromVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/GetRecordings", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.RecordingsResult> GetRecordingsAsync(MDA.RemoteRecord2.ExternalId externalAccountId, int recordingType, MDA.RemoteRecord2.DvrPagingInfo pagingInfo, MDA.RemoteRecord2.EpgInfo epgInfo, long deltasFromVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/GetProgramInfos", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.ProgramInfosResult GetProgramInfos(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] programIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/GetProgramInfos", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.ProgramInfosResult> GetProgramInfosAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] programIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/GetStorageInfos", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.StorageInfo[] GetStorageInfos(MDA.RemoteRecord2.ExternalId externalAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/GetStorageInfos", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.StorageInfo[]> GetStorageInfosAsync(MDA.RemoteRecord2.ExternalId externalAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateRecordingDefinition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult UpdateRecordingDefinition(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.RecordingDefinition changedRD, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateRecordingDefinition", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateRecordingDefinitionAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.RecordingDefinition changedRD, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateUpcomingRecording", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult UpdateUpcomingRecording(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.Recording changedRecording, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateUpcomingRecording", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateUpcomingRecordingAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.Recording changedRecording, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateOneTimeToSeries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult UpdateOneTimeToSeries(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId oneTimeDynamicRDId, MDA.RemoteRecord2.DynamicRD seriesSettings, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateOneTimeToSeries", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateOneTimeToSeriesAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId oneTimeDynamicRDId, MDA.RemoteRecord2.DynamicRD seriesSettings, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateCompletedRecording", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult UpdateCompletedRecording(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingId, MDA.RemoteRecord2.RecordedInfo info, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateCompletedRecording", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateCompletedRecordingAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingId, MDA.RemoteRecord2.RecordedInfo info, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateRecordingDefinitionPr" +
            "iorities", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult UpdateRecordingDefinitionPriorities(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] rdIdsInNewOrderHighestToLowest, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateRecordingDefinitionPr" +
            "iorities", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateRecordingDefinitionPrioritiesAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] rdIdsInNewOrderHighestToLowest, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/RemoveRecordingDefinition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult RemoveRecordingDefinition(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingDefinitionId, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/RemoveRecordingDefinition", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> RemoveRecordingDefinitionAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingDefinitionId, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/RemoveUpcomingRecordings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult RemoveUpcomingRecordings(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] recordingIds, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/RemoveUpcomingRecordings", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> RemoveUpcomingRecordingsAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] recordingIds, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateConflictedRecordingSt" +
            "ate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult UpdateConflictedRecordingState(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingId, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/UpdateConflictedRecordingSt" +
            "ate", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateConflictedRecordingStateAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingId, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/ResolveConflicts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult ResolveConflicts(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] conflictIds, MDA.RemoteRecord2.ExternalId[] solutionIds, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/ResolveConflicts", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> ResolveConflictsAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] conflictIds, MDA.RemoteRecord2.ExternalId[] solutionIds, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/ResolveConflictCustom", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult ResolveConflictCustom(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId conflictId, MDA.RemoteRecord2.ExternalId[] scheduledRecordingIds, MDA.RemoteRecord2.ExternalId[] conflictedRecordingIds, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/ResolveConflictCustom", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> ResolveConflictCustomAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId conflictId, MDA.RemoteRecord2.ExternalId[] scheduledRecordingIds, MDA.RemoteRecord2.ExternalId[] conflictedRecordingIds, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/RemoveCompletedRecordings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MDA.RemoteRecord2.SchedulingResult RemoveCompletedRecordings(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] recordingIds, long version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/iptv/oss/branch/remoterecord/RemoveCompletedRecordings", ReplyAction="*")]
        System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> RemoveCompletedRecordingsAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] recordingIds, long version);
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringExternalId))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GuidExternalId))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProviderExternalId))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public abstract partial class ExternalId : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class StorageInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ulong capacityInBytesField;
        
        private ulong availableBytesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ulong CapacityInBytes {
            get {
                return this.capacityInBytesField;
            }
            set {
                this.capacityInBytesField = value;
                this.RaisePropertyChanged("CapacityInBytes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ulong AvailableBytes {
            get {
                return this.availableBytesField;
            }
            set {
                this.availableBytesField = value;
                this.RaisePropertyChanged("AvailableBytes");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class ProgramInfosResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private DvrTransactionReport[] failedTransactionsField;
        
        private ProgramInfo[] infosField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DvrTransactionReport[] FailedTransactions {
            get {
                return this.failedTransactionsField;
            }
            set {
                this.failedTransactionsField = value;
                this.RaisePropertyChanged("FailedTransactions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public ProgramInfo[] Infos {
            get {
                return this.infosField;
            }
            set {
                this.infosField = value;
                this.RaisePropertyChanged("Infos");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class DvrTransactionReport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ExternalId itemIdField;
        
        private string errMsgField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExternalId ItemId {
            get {
                return this.itemIdField;
            }
            set {
                this.itemIdField = value;
                this.RaisePropertyChanged("ItemId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ErrMsg {
            get {
                return this.errMsgField;
            }
            set {
                this.errMsgField = value;
                this.RaisePropertyChanged("ErrMsg");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class ProgramInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ExternalId programIdField;
        
        private string titleField;
        
        private string episodeTitleField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExternalId ProgramId {
            get {
                return this.programIdField;
            }
            set {
                this.programIdField = value;
                this.RaisePropertyChanged("ProgramId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
                this.RaisePropertyChanged("Title");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string EpisodeTitle {
            get {
                return this.episodeTitleField;
            }
            set {
                this.episodeTitleField = value;
                this.RaisePropertyChanged("EpisodeTitle");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class RecordingsResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private DvrPagingInfo pagingInfoField;
        
        private RecordingDefinition[] rDsField;
        
        private RecordingContext[] recordingsField;
        
        private long scheduleVersionField;
        
        private bool isDeltaField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DvrPagingInfo PagingInfo {
            get {
                return this.pagingInfoField;
            }
            set {
                this.pagingInfoField = value;
                this.RaisePropertyChanged("PagingInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public RecordingDefinition[] RDs {
            get {
                return this.rDsField;
            }
            set {
                this.rDsField = value;
                this.RaisePropertyChanged("RDs");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public RecordingContext[] Recordings {
            get {
                return this.recordingsField;
            }
            set {
                this.recordingsField = value;
                this.RaisePropertyChanged("Recordings");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long ScheduleVersion {
            get {
                return this.scheduleVersionField;
            }
            set {
                this.scheduleVersionField = value;
                this.RaisePropertyChanged("ScheduleVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsDelta {
            get {
                return this.isDeltaField;
            }
            set {
                this.isDeltaField = value;
                this.RaisePropertyChanged("IsDelta");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DvrPagingInfoByTimeInterval))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DvrPagingInfoBySequence))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public abstract partial class DvrPagingInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private byte[] tokenField;
        
        private bool discardRemainingField;
        
        private int maxRecordingElementsField;
        
        private int nextRDRecordingElementsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=0)]
        public byte[] Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
                this.RaisePropertyChanged("Token");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DiscardRemaining {
            get {
                return this.discardRemainingField;
            }
            set {
                this.discardRemainingField = value;
                this.RaisePropertyChanged("DiscardRemaining");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxRecordingElements {
            get {
                return this.maxRecordingElementsField;
            }
            set {
                this.maxRecordingElementsField = value;
                this.RaisePropertyChanged("MaxRecordingElements");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int NextRDRecordingElements {
            get {
                return this.nextRDRecordingElementsField;
            }
            set {
                this.nextRDRecordingElementsField = value;
                this.RaisePropertyChanged("NextRDRecordingElements");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class DvrPagingInfoByTimeInterval : DvrPagingInfo {
        
        private System.DateTime utcStartTimeField;
        
        private int timeIntervalHoursField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime UtcStartTime {
            get {
                return this.utcStartTimeField;
            }
            set {
                this.utcStartTimeField = value;
                this.RaisePropertyChanged("UtcStartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int TimeIntervalHours {
            get {
                return this.timeIntervalHoursField;
            }
            set {
                this.timeIntervalHoursField = value;
                this.RaisePropertyChanged("TimeIntervalHours");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class DvrPagingInfoBySequence : DvrPagingInfo {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ManualRD))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DynamicRD))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public abstract partial class RecordingDefinition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ExternalId idField;
        
        private ExternalId stationIdField;
        
        private Recording[] recordingsField;
        
        private int frequencyField;
        
        private int hardEndPadSecondsField;
        
        private int hardStartPadSecondsField;
        
        private int keepUntilField;
        
        private int priorityField;
        
        private int stateField;
        
        private string titleField;
        
        private int channelField;
        
        private System.DateTime utcStartTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExternalId Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ExternalId StationId {
            get {
                return this.stationIdField;
            }
            set {
                this.stationIdField = value;
                this.RaisePropertyChanged("StationId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public Recording[] Recordings {
            get {
                return this.recordingsField;
            }
            set {
                this.recordingsField = value;
                this.RaisePropertyChanged("Recordings");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Frequency {
            get {
                return this.frequencyField;
            }
            set {
                this.frequencyField = value;
                this.RaisePropertyChanged("Frequency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int HardEndPadSeconds {
            get {
                return this.hardEndPadSecondsField;
            }
            set {
                this.hardEndPadSecondsField = value;
                this.RaisePropertyChanged("HardEndPadSeconds");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int HardStartPadSeconds {
            get {
                return this.hardStartPadSecondsField;
            }
            set {
                this.hardStartPadSecondsField = value;
                this.RaisePropertyChanged("HardStartPadSeconds");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int KeepUntil {
            get {
                return this.keepUntilField;
            }
            set {
                this.keepUntilField = value;
                this.RaisePropertyChanged("KeepUntil");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
                this.RaisePropertyChanged("Priority");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("State");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
                this.RaisePropertyChanged("Title");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime UtcStartTime {
            get {
                return this.utcStartTimeField;
            }
            set {
                this.utcStartTimeField = value;
                this.RaisePropertyChanged("UtcStartTime");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class Recording : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ExternalId idField;
        
        private ExternalId programIdField;
        
        private ExternalId stationIdField;
        
        private ProgramInfo programInfoField;
        
        private RecordedInfo recordedInfoField;
        
        private int channelField;
        
        private int durationSecondsField;
        
        private int hardEndPadSecondsField;
        
        private int hardStartPadSecondsField;
        
        private int keepUntilField;
        
        private int stateField;
        
        private System.DateTime utcStartTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExternalId Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ExternalId ProgramId {
            get {
                return this.programIdField;
            }
            set {
                this.programIdField = value;
                this.RaisePropertyChanged("ProgramId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ExternalId StationId {
            get {
                return this.stationIdField;
            }
            set {
                this.stationIdField = value;
                this.RaisePropertyChanged("StationId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ProgramInfo ProgramInfo {
            get {
                return this.programInfoField;
            }
            set {
                this.programInfoField = value;
                this.RaisePropertyChanged("ProgramInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public RecordedInfo RecordedInfo {
            get {
                return this.recordedInfoField;
            }
            set {
                this.recordedInfoField = value;
                this.RaisePropertyChanged("RecordedInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int DurationSeconds {
            get {
                return this.durationSecondsField;
            }
            set {
                this.durationSecondsField = value;
                this.RaisePropertyChanged("DurationSeconds");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int HardEndPadSeconds {
            get {
                return this.hardEndPadSecondsField;
            }
            set {
                this.hardEndPadSecondsField = value;
                this.RaisePropertyChanged("HardEndPadSeconds");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int HardStartPadSeconds {
            get {
                return this.hardStartPadSecondsField;
            }
            set {
                this.hardStartPadSecondsField = value;
                this.RaisePropertyChanged("HardStartPadSeconds");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int KeepUntil {
            get {
                return this.keepUntilField;
            }
            set {
                this.keepUntilField = value;
                this.RaisePropertyChanged("KeepUntil");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("State");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime UtcStartTime {
            get {
                return this.utcStartTimeField;
            }
            set {
                this.utcStartTimeField = value;
                this.RaisePropertyChanged("UtcStartTime");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class RecordedInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ExternalId owningDeviceIdField;
        
        private int softStartPadSecondsField;
        
        private int softEndPadSecondsField;
        
        private System.DateTime utcActualStartTimeField;
        
        private System.DateTime utcActualEndTimeField;
        
        private int startReasonField;
        
        private int stopReasonField;
        
        private int keepUntilField;
        
        private System.DateTime utcKeepUntilDateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExternalId OwningDeviceId {
            get {
                return this.owningDeviceIdField;
            }
            set {
                this.owningDeviceIdField = value;
                this.RaisePropertyChanged("OwningDeviceId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int SoftStartPadSeconds {
            get {
                return this.softStartPadSecondsField;
            }
            set {
                this.softStartPadSecondsField = value;
                this.RaisePropertyChanged("SoftStartPadSeconds");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int SoftEndPadSeconds {
            get {
                return this.softEndPadSecondsField;
            }
            set {
                this.softEndPadSecondsField = value;
                this.RaisePropertyChanged("SoftEndPadSeconds");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime UtcActualStartTime {
            get {
                return this.utcActualStartTimeField;
            }
            set {
                this.utcActualStartTimeField = value;
                this.RaisePropertyChanged("UtcActualStartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime UtcActualEndTime {
            get {
                return this.utcActualEndTimeField;
            }
            set {
                this.utcActualEndTimeField = value;
                this.RaisePropertyChanged("UtcActualEndTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int StartReason {
            get {
                return this.startReasonField;
            }
            set {
                this.startReasonField = value;
                this.RaisePropertyChanged("StartReason");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int StopReason {
            get {
                return this.stopReasonField;
            }
            set {
                this.stopReasonField = value;
                this.RaisePropertyChanged("StopReason");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int KeepUntil {
            get {
                return this.keepUntilField;
            }
            set {
                this.keepUntilField = value;
                this.RaisePropertyChanged("KeepUntil");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime UtcKeepUntilDate {
            get {
                return this.utcKeepUntilDateField;
            }
            set {
                this.utcKeepUntilDateField = value;
                this.RaisePropertyChanged("UtcKeepUntilDate");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class ManualRD : RecordingDefinition {
        
        private int durationSecondsField;
        
        private int keepAtMostField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int DurationSeconds {
            get {
                return this.durationSecondsField;
            }
            set {
                this.durationSecondsField = value;
                this.RaisePropertyChanged("DurationSeconds");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int KeepAtMost {
            get {
                return this.keepAtMostField;
            }
            set {
                this.keepAtMostField = value;
                this.RaisePropertyChanged("KeepAtMost");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class DynamicRD : RecordingDefinition {
        
        private ExternalId programIdField;
        
        private ExternalId seriesIdField;
        
        private int keepAtMostField;
        
        private int airtimeDomainField;
        
        private int channelDomainField;
        
        private int showTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExternalId ProgramId {
            get {
                return this.programIdField;
            }
            set {
                this.programIdField = value;
                this.RaisePropertyChanged("ProgramId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ExternalId SeriesId {
            get {
                return this.seriesIdField;
            }
            set {
                this.seriesIdField = value;
                this.RaisePropertyChanged("SeriesId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int KeepAtMost {
            get {
                return this.keepAtMostField;
            }
            set {
                this.keepAtMostField = value;
                this.RaisePropertyChanged("KeepAtMost");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int AirtimeDomain {
            get {
                return this.airtimeDomainField;
            }
            set {
                this.airtimeDomainField = value;
                this.RaisePropertyChanged("AirtimeDomain");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int ChannelDomain {
            get {
                return this.channelDomainField;
            }
            set {
                this.channelDomainField = value;
                this.RaisePropertyChanged("ChannelDomain");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int ShowType {
            get {
                return this.showTypeField;
            }
            set {
                this.showTypeField = value;
                this.RaisePropertyChanged("ShowType");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class RecordingContext : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ExternalId parentIdField;
        
        private Recording recordingField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExternalId ParentId {
            get {
                return this.parentIdField;
            }
            set {
                this.parentIdField = value;
                this.RaisePropertyChanged("ParentId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Recording Recording {
            get {
                return this.recordingField;
            }
            set {
                this.recordingField = value;
                this.RaisePropertyChanged("Recording");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class EpgInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime utcStartTimeField;
        
        private int durationHoursField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime UtcStartTime {
            get {
                return this.utcStartTimeField;
            }
            set {
                this.utcStartTimeField = value;
                this.RaisePropertyChanged("UtcStartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int DurationHours {
            get {
                return this.durationHoursField;
            }
            set {
                this.durationHoursField = value;
                this.RaisePropertyChanged("DurationHours");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class AlternateAiringInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ExternalId recordingIdField;
        
        private ExternalId stationIdField;
        
        private System.DateTime utcStartTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExternalId RecordingId {
            get {
                return this.recordingIdField;
            }
            set {
                this.recordingIdField = value;
                this.RaisePropertyChanged("RecordingId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ExternalId StationId {
            get {
                return this.stationIdField;
            }
            set {
                this.stationIdField = value;
                this.RaisePropertyChanged("StationId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime UtcStartTime {
            get {
                return this.utcStartTimeField;
            }
            set {
                this.utcStartTimeField = value;
                this.RaisePropertyChanged("UtcStartTime");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class ConflictSolution : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ExternalId idField;
        
        private ExternalId[] recordingIdsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExternalId Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public ExternalId[] RecordingIds {
            get {
                return this.recordingIdsField;
            }
            set {
                this.recordingIdsField = value;
                this.RaisePropertyChanged("RecordingIds");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class ConflictSlice : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ExternalId[] recordingIdsField;
        
        private System.DateTime utcStartTimeField;
        
        private System.DateTime utcEndTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public ExternalId[] RecordingIds {
            get {
                return this.recordingIdsField;
            }
            set {
                this.recordingIdsField = value;
                this.RaisePropertyChanged("RecordingIds");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime UtcStartTime {
            get {
                return this.utcStartTimeField;
            }
            set {
                this.utcStartTimeField = value;
                this.RaisePropertyChanged("UtcStartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime UtcEndTime {
            get {
                return this.utcEndTimeField;
            }
            set {
                this.utcEndTimeField = value;
                this.RaisePropertyChanged("UtcEndTime");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class RecordingConflict : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ExternalId[] allRecordingIdsField;
        
        private ConflictSlice[] conflictSlicesField;
        
        private ExternalId idField;
        
        private ExternalId newRecordingIdField;
        
        private ConflictSolution[] solutionsField;
        
        private AlternateAiringInfo[] alternateAiringInfoField;
        
        private int recordingNewSolutionIndexField;
        
        private int statusQuoSolutionIndexField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public ExternalId[] AllRecordingIds {
            get {
                return this.allRecordingIdsField;
            }
            set {
                this.allRecordingIdsField = value;
                this.RaisePropertyChanged("AllRecordingIds");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public ConflictSlice[] ConflictSlices {
            get {
                return this.conflictSlicesField;
            }
            set {
                this.conflictSlicesField = value;
                this.RaisePropertyChanged("ConflictSlices");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ExternalId Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ExternalId NewRecordingId {
            get {
                return this.newRecordingIdField;
            }
            set {
                this.newRecordingIdField = value;
                this.RaisePropertyChanged("NewRecordingId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public ConflictSolution[] Solutions {
            get {
                return this.solutionsField;
            }
            set {
                this.solutionsField = value;
                this.RaisePropertyChanged("Solutions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public AlternateAiringInfo[] AlternateAiringInfo {
            get {
                return this.alternateAiringInfoField;
            }
            set {
                this.alternateAiringInfoField = value;
                this.RaisePropertyChanged("AlternateAiringInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int RecordingNewSolutionIndex {
            get {
                return this.recordingNewSolutionIndexField;
            }
            set {
                this.recordingNewSolutionIndexField = value;
                this.RaisePropertyChanged("RecordingNewSolutionIndex");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int StatusQuoSolutionIndex {
            get {
                return this.statusQuoSolutionIndexField;
            }
            set {
                this.statusQuoSolutionIndexField = value;
                this.RaisePropertyChanged("StatusQuoSolutionIndex");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class SchedulingResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private RecordingContext[] changedRecordingsField;
        
        private RecordingDefinition[] changedRDsField;
        
        private RecordingConflict[] conflictsField;
        
        private DvrTransactionReport[] failedTransactionsField;
        
        private long scheduleVersionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public RecordingContext[] ChangedRecordings {
            get {
                return this.changedRecordingsField;
            }
            set {
                this.changedRecordingsField = value;
                this.RaisePropertyChanged("ChangedRecordings");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public RecordingDefinition[] ChangedRDs {
            get {
                return this.changedRDsField;
            }
            set {
                this.changedRDsField = value;
                this.RaisePropertyChanged("ChangedRDs");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public RecordingConflict[] Conflicts {
            get {
                return this.conflictsField;
            }
            set {
                this.conflictsField = value;
                this.RaisePropertyChanged("Conflicts");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public DvrTransactionReport[] FailedTransactions {
            get {
                return this.failedTransactionsField;
            }
            set {
                this.failedTransactionsField = value;
                this.RaisePropertyChanged("FailedTransactions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long ScheduleVersion {
            get {
                return this.scheduleVersionField;
            }
            set {
                this.scheduleVersionField = value;
                this.RaisePropertyChanged("ScheduleVersion");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class StringExternalId : ExternalId {
        
        private string idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class GuidExternalId : ExternalId {
        
        private System.Guid idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/TV/Dvr/2009/10/RemoteRecord")]
    public partial class ProviderExternalId : ExternalId {
        
        private string nameField;
        
        private string idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface RemoteRecordScheduler2SoapChannel : MDA.RemoteRecord2.RemoteRecordScheduler2Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteRecordScheduler2SoapClient : System.ServiceModel.ClientBase<MDA.RemoteRecord2.RemoteRecordScheduler2Soap>, MDA.RemoteRecord2.RemoteRecordScheduler2Soap {
        
        public RemoteRecordScheduler2SoapClient() {
        }
        
        public RemoteRecordScheduler2SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RemoteRecordScheduler2SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteRecordScheduler2SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteRecordScheduler2SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MDA.RemoteRecord2.SchedulingResult AddRecordingDefinition(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.RecordingDefinition recordingDefinition, bool epgOptional, long version) {
            return base.Channel.AddRecordingDefinition(externalAccountId, recordingDefinition, epgOptional, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> AddRecordingDefinitionAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.RecordingDefinition recordingDefinition, bool epgOptional, long version) {
            return base.Channel.AddRecordingDefinitionAsync(externalAccountId, recordingDefinition, epgOptional, version);
        }
        
        public MDA.RemoteRecord2.RecordingsResult GetRecordings(MDA.RemoteRecord2.ExternalId externalAccountId, int recordingType, MDA.RemoteRecord2.DvrPagingInfo pagingInfo, MDA.RemoteRecord2.EpgInfo epgInfo, long deltasFromVersion) {
            return base.Channel.GetRecordings(externalAccountId, recordingType, pagingInfo, epgInfo, deltasFromVersion);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.RecordingsResult> GetRecordingsAsync(MDA.RemoteRecord2.ExternalId externalAccountId, int recordingType, MDA.RemoteRecord2.DvrPagingInfo pagingInfo, MDA.RemoteRecord2.EpgInfo epgInfo, long deltasFromVersion) {
            return base.Channel.GetRecordingsAsync(externalAccountId, recordingType, pagingInfo, epgInfo, deltasFromVersion);
        }
        
        public MDA.RemoteRecord2.ProgramInfosResult GetProgramInfos(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] programIds) {
            return base.Channel.GetProgramInfos(externalAccountId, programIds);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.ProgramInfosResult> GetProgramInfosAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] programIds) {
            return base.Channel.GetProgramInfosAsync(externalAccountId, programIds);
        }
        
        public MDA.RemoteRecord2.StorageInfo[] GetStorageInfos(MDA.RemoteRecord2.ExternalId externalAccountId) {
            return base.Channel.GetStorageInfos(externalAccountId);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.StorageInfo[]> GetStorageInfosAsync(MDA.RemoteRecord2.ExternalId externalAccountId) {
            return base.Channel.GetStorageInfosAsync(externalAccountId);
        }
        
        public MDA.RemoteRecord2.SchedulingResult UpdateRecordingDefinition(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.RecordingDefinition changedRD, long version) {
            return base.Channel.UpdateRecordingDefinition(externalAccountId, changedRD, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateRecordingDefinitionAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.RecordingDefinition changedRD, long version) {
            return base.Channel.UpdateRecordingDefinitionAsync(externalAccountId, changedRD, version);
        }
        
        public MDA.RemoteRecord2.SchedulingResult UpdateUpcomingRecording(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.Recording changedRecording, long version) {
            return base.Channel.UpdateUpcomingRecording(externalAccountId, changedRecording, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateUpcomingRecordingAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.Recording changedRecording, long version) {
            return base.Channel.UpdateUpcomingRecordingAsync(externalAccountId, changedRecording, version);
        }
        
        public MDA.RemoteRecord2.SchedulingResult UpdateOneTimeToSeries(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId oneTimeDynamicRDId, MDA.RemoteRecord2.DynamicRD seriesSettings, long version) {
            return base.Channel.UpdateOneTimeToSeries(externalAccountId, oneTimeDynamicRDId, seriesSettings, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateOneTimeToSeriesAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId oneTimeDynamicRDId, MDA.RemoteRecord2.DynamicRD seriesSettings, long version) {
            return base.Channel.UpdateOneTimeToSeriesAsync(externalAccountId, oneTimeDynamicRDId, seriesSettings, version);
        }
        
        public MDA.RemoteRecord2.SchedulingResult UpdateCompletedRecording(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingId, MDA.RemoteRecord2.RecordedInfo info, long version) {
            return base.Channel.UpdateCompletedRecording(externalAccountId, recordingId, info, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateCompletedRecordingAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingId, MDA.RemoteRecord2.RecordedInfo info, long version) {
            return base.Channel.UpdateCompletedRecordingAsync(externalAccountId, recordingId, info, version);
        }
        
        public MDA.RemoteRecord2.SchedulingResult UpdateRecordingDefinitionPriorities(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] rdIdsInNewOrderHighestToLowest, long version) {
            return base.Channel.UpdateRecordingDefinitionPriorities(externalAccountId, rdIdsInNewOrderHighestToLowest, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateRecordingDefinitionPrioritiesAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] rdIdsInNewOrderHighestToLowest, long version) {
            return base.Channel.UpdateRecordingDefinitionPrioritiesAsync(externalAccountId, rdIdsInNewOrderHighestToLowest, version);
        }
        
        public MDA.RemoteRecord2.SchedulingResult RemoveRecordingDefinition(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingDefinitionId, long version) {
            return base.Channel.RemoveRecordingDefinition(externalAccountId, recordingDefinitionId, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> RemoveRecordingDefinitionAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingDefinitionId, long version) {
            return base.Channel.RemoveRecordingDefinitionAsync(externalAccountId, recordingDefinitionId, version);
        }
        
        public MDA.RemoteRecord2.SchedulingResult RemoveUpcomingRecordings(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] recordingIds, long version) {
            return base.Channel.RemoveUpcomingRecordings(externalAccountId, recordingIds, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> RemoveUpcomingRecordingsAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] recordingIds, long version) {
            return base.Channel.RemoveUpcomingRecordingsAsync(externalAccountId, recordingIds, version);
        }
        
        public MDA.RemoteRecord2.SchedulingResult UpdateConflictedRecordingState(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingId, long version) {
            return base.Channel.UpdateConflictedRecordingState(externalAccountId, recordingId, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> UpdateConflictedRecordingStateAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId recordingId, long version) {
            return base.Channel.UpdateConflictedRecordingStateAsync(externalAccountId, recordingId, version);
        }
        
        public MDA.RemoteRecord2.SchedulingResult ResolveConflicts(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] conflictIds, MDA.RemoteRecord2.ExternalId[] solutionIds, long version) {
            return base.Channel.ResolveConflicts(externalAccountId, conflictIds, solutionIds, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> ResolveConflictsAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] conflictIds, MDA.RemoteRecord2.ExternalId[] solutionIds, long version) {
            return base.Channel.ResolveConflictsAsync(externalAccountId, conflictIds, solutionIds, version);
        }
        
        public MDA.RemoteRecord2.SchedulingResult ResolveConflictCustom(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId conflictId, MDA.RemoteRecord2.ExternalId[] scheduledRecordingIds, MDA.RemoteRecord2.ExternalId[] conflictedRecordingIds, long version) {
            return base.Channel.ResolveConflictCustom(externalAccountId, conflictId, scheduledRecordingIds, conflictedRecordingIds, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> ResolveConflictCustomAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId conflictId, MDA.RemoteRecord2.ExternalId[] scheduledRecordingIds, MDA.RemoteRecord2.ExternalId[] conflictedRecordingIds, long version) {
            return base.Channel.ResolveConflictCustomAsync(externalAccountId, conflictId, scheduledRecordingIds, conflictedRecordingIds, version);
        }
        
        public MDA.RemoteRecord2.SchedulingResult RemoveCompletedRecordings(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] recordingIds, long version) {
            return base.Channel.RemoveCompletedRecordings(externalAccountId, recordingIds, version);
        }
        
        public System.Threading.Tasks.Task<MDA.RemoteRecord2.SchedulingResult> RemoveCompletedRecordingsAsync(MDA.RemoteRecord2.ExternalId externalAccountId, MDA.RemoteRecord2.ExternalId[] recordingIds, long version) {
            return base.Channel.RemoveCompletedRecordingsAsync(externalAccountId, recordingIds, version);
        }
    }
}
